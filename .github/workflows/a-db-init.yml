name: Database Check and Init Simulation

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "The deployment environment to use"
    secrets:
      LINUX_SSH_PRIVATE_KEY:
        required: true
      LINUX_USER_CICD:
        required: true
      LINUX_SERVER_IP:
        required: true
      POSTGRES__SECRET_ENV_FILE:
        required: true
    outputs:
      needs_depl__db:
        description: "Whether DB needs deployment"
        value: ${{ jobs.check-db.outputs.needs_depl__db }}

jobs:
  check-db:
    environment: production
    runs-on: ubuntu-latest
    outputs:
      needs_depl__db: ${{ steps.check-depl-needed--db.outputs.needs_depl__db }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Check DB container status
      - name: Check if Postgres Deployment needed
        id: check-depl-needed--db
        env:
          SSH_KEY: ${{ secrets.LINUX_SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.LINUX_USER_CICD }}
          SERVER_IP: ${{ secrets.LINUX_SERVER_IP }}
          DEPLOY_POSTGRES_NEEDED: true
        run: |
          # Debug environment variables
          echo "Debug - Checking if variables are set:"
          echo "SSH_USER is set: $(if [ -n "$SSH_USER" ]; then echo "YES"; else echo "NO"; fi)"
          echo "SERVER_IP is set: $(if [ -n "$SERVER_IP" ]; then echo "YES"; else echo "NO"; fi)"

          # Setup SSH
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          cat >>~/.ssh/config <<END
          Host prod
            HostName $SERVER_IP
            User $SSH_USER
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
          END

          # Check if Postgres container exists
          CONTAINER_EXISTS=$(ssh prod "docker ps -a --format '{{.Names}}' | grep -q '^payloadcms-postgres-db-portfolio-prod$' && echo 'true' || echo 'false'")

          if [ "$CONTAINER_EXISTS" = "false" ] && [ "${{ env.DEPLOY_POSTGRES_NEEDED }}" = "true" ]; then
            echo "⚠️ No Postgres container found & desire to deploy it is ${{ env.DEPLOY_POSTGRES_NEEDED }}"
            echo "needs_depl__db=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Postgres container exists. Will skip Postgres setup."
            echo "needs_depl__db=false" >> $GITHUB_OUTPUT
          fi

      # Note: Ideally we only create the DB container once-- so no need to publish.
      # Also, no need to build the image-- we're using the standard postgres image.
      # Therefore, we simply need to deloy the standard postgres image, as a container, and inject our prod env vars into it
      - name: Deploy DB Container on remote server
        if: steps.check-depl-needed--db.outputs.needs_depl__db == 'true'
        env:
          SSH_KEY: ${{ secrets.LINUX_SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.LINUX_USER_CICD }}
          SERVER_IP: ${{ secrets.LINUX_SERVER_IP }}
          POSTGRES__PROD_ENV: ${{ secrets.POSTGRES__SECRET_ENV_FILE }}
          DEPLOY_POSTGRES_NEEDED: true
        run: |
          # Debug environment variables
          echo "Debug - Checking if variables are set:"
          echo "SSH_USER is set: $(if [ -n "$SSH_USER" ]; then echo "YES"; else echo "NO"; fi)"
          echo "SERVER_IP is set: $(if [ -n "$SERVER_IP" ]; then echo "YES"; else echo "NO"; fi)"

          # Setup SSH
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          cat >>~/.ssh/config <<END
          Host prod
            HostName $SERVER_IP
            User $SSH_USER
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
          END

          # Create directory on remote server for the temporary prod env file
          ssh prod "mkdir -p ~/payloadcms-postgres-db-portfolio2025"

          # Create the temporary prod env file directly on the remote server
          ssh prod 'echo "$POSTGRES__PROD_ENV" > ~/payloadcms-postgres-db-portfolio2025/postgres-env-prod.env'

          # Create Docker network if it doesn't exist
          # This network is for PayloadCMS & Postgres to communicate, hence "private" in its name
          ssh prod "docker network create private-payloadcms-pg-dockernet || true"

          # Run the container on the remote server
          ssh prod "docker volume create payloadcms-postgres-data-prod && \
          docker volume create payloadcms-postgres-init-scripts-prod && \
          docker run -d \
            --name payloadcms-postgres-db-portfolio-prod \
            --network private-payloadcms-pg-dockernet \
            --env-file ./payloadcms-postgres-db-portfolio2025/postgres-env-prod.env \
            -p 5432:5432 \
            -v payloadcms-postgres-data-prod:/var/lib/postgresql/data \
            -v payloadcms-postgres-init-scripts-prod:/docker-entrypoint-initdb.d \
            postgres:17"

          # Verify the container is running in a separate command
          CONTAINER_STATUS=$(ssh prod "docker ps -f name=payloadcms-postgres-db-portfolio-prod --format '{{.Status}}'")
          if [ -n "$CONTAINER_STATUS" ]; then
            echo "Database container successfully created and running"
            echo "DB_CREATED=true" >> $GITHUB_ENV
          else
            echo "Failed to create database container"
            exit 1
          fi

      # Final status output
      - name: Status Report
        run: |
          if [[ "${{ steps.check-depl-needed--db.outputs.needs_depl__db }}" == "false" ]]; then
            echo "Database container already existed"
          elif [[ "$DB_CREATED" == "true" ]]; then
            echo "Database container was created"
          else
            echo "Failed to verify database status"
          fi
